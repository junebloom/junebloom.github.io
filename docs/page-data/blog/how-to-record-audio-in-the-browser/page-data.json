{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/blog/how-to-record-audio-in-the-browser/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"How to Record Audio in the Browser","date":"2020-11-05"},"timeToRead":4,"html":"<p>There are three browser APIs we'll need for recording audio:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices\">MediaDevices</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\">MediaStream</a>,</li>\n<li>and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\">MediaRecorder</a>.</li>\n</ul>\n<p>MediaDevices is for requesting access to a user's media inputs like cameras and microphones.</p>\n<p>MediaStream is for managing a <em>stream of data</em>, in our case from the user's input device.</p>\n<p>And MediaRecorder is for encoding the data from a MediaStream and packaging it into a <em>file</em>.</p>\n<p>There is also <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\">Web Audio</a>, which is an API for doing all sorts of really cool audio processing. It isn't necessary at all for basic recording functionality, but it can be used in the middle of the <code class=\"language-text\">MediaStream -&gt; MediaRecorder</code> pipeline to do additional processing. If you're a digital audio nerd, you should definitely give it a look, but I won't be covering it in this article.</p>\n<h2>Getting the Input Stream</h2>\n<p>The browser provides a MediaDevices object for us via <code class=\"language-text\">navigator.mediaDevices</code>. We can use this to get a MediaStream for the user's input device.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    video<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    audio<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> stream<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will create a MediaStream with the user's default audio input device. Note that <code class=\"language-text\">getUserMedia()</code> returns a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>, because the browser asynchronously <em>prompts the user to request permission</em> for access to their device to create the MediaStream.</p>\n<h3>Handle the Errors</h3>\n<p>If the user approves the request <em>and</em> everything is successful, the promise will resolve with a MediaStream object. Otherwise the promise will be rejected with an error. You can see the possible errors <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Exceptions\">here</a>.</p>\n<p>Let's be sure to actually handle any errors, so that our application can either</p>\n<ul>\n<li>gracefully recover,</li>\n<li>or show the user that there is a problem instead of just \"not working\" from their perspective.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      video<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      audio<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> stream<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Display some error UI.</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Bonus: Passing Constraints</h3>\n<p>We can also pass additional <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints\">constraints</a> to <code class=\"language-text\">getUserMedia()</code>, if we wish. The constraints we passed above specify that we <em>don't</em> want the stream to include a <code class=\"language-text\">video</code> track and we <em>do</em> want an <code class=\"language-text\">audio</code> track.</p>\n<p>We can pass an object as the <code class=\"language-text\">audio</code> field to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints\">further constrain</a> the properties of the audio track itself to, for example, ask for a stream without noise suppression applied.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  video<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  audio<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    noiseSuppression<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- ### Bonus: Device Selection\n\n... -->\n<h2>Recording the Stream</h2>\n<p>Once we have a MediaStream object, we can create a MediaRecorder and start recording!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mediaRecorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ondataavailable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something with the resulting file.</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Handle any errors that occur during recording.</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Start recording.</span>\nmediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Stop after five seconds.</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You'll obviously want <code class=\"language-text\">start()</code> and <code class=\"language-text\">stop()</code> to be triggered in ways that make sense for your app. Probably in response to clicking a button.</p>\n<p>The <code class=\"language-text\">data</code> property passed to <code class=\"language-text\">ondataavilable</code> is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\">Blob</a> containing the full resulting audio file, in whatever encoding and format the browser chose automatically (more on this below).</p>\n<p>Be aware that <code class=\"language-text\">ondataavailable</code> doesn't <em>always</em> behave this way: If we pass a timeslice argument to <code class=\"language-text\">start()</code>, then <code class=\"language-text\">ondataavailable</code> will fire once per timeslice until recording has ended.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// A Blob will be available every 100ms, and it's up to us to join</span>\n<span class=\"token comment\">// the slices together into a full file once recording has finished.</span>\nmediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Take a look at the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\">MediaRecorder</a> docs to see all of the available methods and events.</p>\n<h3>Bonus: Passing Options</h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder\">MediaRecorder constructor</a> can also accept an options object as its second parameter. We can use this to specify the MIME type, codec, and bits per second of the resulting file, rather than letting the browser choose these automatically.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mediaRecorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  mimeType<span class=\"token operator\">:</span> <span class=\"token string\">\"audio/ogg; codecs=vorbis\"</span><span class=\"token punctuation\">,</span>\n  bitsPerSecond<span class=\"token operator\">:</span> <span class=\"token number\">128000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Be careful setting the MIME type and codec, because browser support for different formats is not consistent. You should use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported\"><code class=\"language-text\">MediaRecorder.isTypeSupported()</code></a> to ensure that the format is supported, and have fallbacks in case it isn't.</p>\n<h2>Conclusion</h2>\n<p>So there you have it! Recording audio in the browser is pretty straightforward thanks to some well-designed APIs. Always nice to see!</p>\n<p>If you want to see a real-world example using these APIs, check out the <a href=\"https://github.com/junebloom/practical/blob/develop/src/components/Recorder.js\">Recorder component</a> for <a href=\"https://junebloom.github.io/practical/\">Practical</a>, a small audio recorder app I made for practicing vocal exercises and music.</p>"}},"pageContext":{"slug":"/blog/how-to-record-audio-in-the-browser/"}},"staticQueryHashes":["3159585216","63159454"]}